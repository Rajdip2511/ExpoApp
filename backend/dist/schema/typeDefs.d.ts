export declare const typeDefs = "#graphql\n  scalar DateTime\n\n  type User {\n    id: ID!\n    name: String!\n    email: String!\n    avatar: String\n    createdAt: DateTime!\n    updatedAt: DateTime!\n    events: [Event!]!\n  }\n\n  type Event {\n    id: ID!\n    name: String!\n    description: String\n    location: String!\n    startTime: DateTime!\n    endTime: DateTime\n    createdAt: DateTime!\n    updatedAt: DateTime!\n    attendees: [User!]!\n    attendeeCount: Int!\n  }\n\n  type AuthPayload {\n    token: String!\n    user: User!\n  }\n\n  input RegisterInput {\n    name: String!\n    email: String!\n    password: String!\n  }\n\n  input LoginInput {\n    email: String!\n    password: String!\n  }\n\n  input CreateEventInput {\n    name: String!\n    description: String\n    location: String!\n    startTime: DateTime!\n    endTime: DateTime\n  }\n\n  type Query {\n    # Get current authenticated user\n    me: User\n\n    # Get all events\n    events: [Event!]!\n\n    # Get a specific event by ID\n    event(id: ID!): Event\n\n    # Get events that the current user has joined\n    myEvents: [Event!]!\n\n    # Health check\n    health: String!\n  }\n\n  type Mutation {\n    # Authentication mutations\n    register(input: RegisterInput!): AuthPayload!\n    login(input: LoginInput!): AuthPayload!\n\n    # Event mutations\n    createEvent(input: CreateEventInput!): Event!\n    joinEvent(eventId: ID!): Event!\n    leaveEvent(eventId: ID!): Event!\n  }\n\n  type Subscription {\n    # Real-time event updates\n    eventUpdated(eventId: ID!): Event!\n    userJoinedEvent(eventId: ID!): User!\n    userLeftEvent(eventId: ID!): ID!\n  }\n";
